<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>编写一个简单的内核驱动</title>
    <url>/2023/07/b22d6d6bbb95.html</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="编写驱动程序"><a href="#编写驱动程序" class="headerlink" title="编写驱动程序"></a>编写驱动程序</h3><h4 id="初始化函数"><a href="#初始化函数" class="headerlink" title="初始化函数"></a>初始化函数</h4><p>驱动程序的初始化函数,注册设备号,将字符设备文件与驱动中的设备操作联系,使用户访问字符设备文件时就能找到对于的file_operations进行操作,以字符驱动为例:</p>
<ul>
<li>根据定义的主次设备号创建设备号—dev_t</li>
<li>注册字符设备编号—register_chrdev_region()</li>
<li>初始化字符设备—cdev,将其与file_operations联系起来</li>
<li>将字符设备加入内核—此处将cdev与设备号联系起来</li>
</ul>
<pre><code class="C">#define MYTESTDEV_MAJOR 168
#define MYTESTDEV_MINOR 0

struct cdev *gDev;
struct file_operations *gFile;
dev_t devNum;
unsigned int subDevNum = 1;
int __init hello_init(void)
&#123;
    devNum = MKDEV(MYTESTDEV_MAJOR, MYTESTDEV_MINOR);
    if(OK == register_chrdev_region(devNum, subDevNum, &quot;helloworld&quot;))&#123;
        printk(KERN_INFO &quot;register_chrdev_region ok \n&quot;);
    &#125;else &#123;
        printk(KERN_INFO &quot;register_chrdev_region error n&quot;);
        return ERROR;
    &#125;
    printk(KERN_INFO &quot; hello driver init \n&quot;);

    gDev = kzalloc(sizeof(struct cdev), GFP_KERNEL);
    gFile = kzalloc(sizeof(struct file_operations), GFP_KERNEL);
    gFile-&gt;open = hello_open;
    gFile-&gt;read = hello_read;
    gFile-&gt;write = hello_write;
    gFile-&gt;owner = THIS_MODULE;

    cdev_init(gDev, gFile);
    cdev_add(gDev, devNum, 1);
    return 0;
&#125;
</code></pre>
<h4 id="设备操作函数"><a href="#设备操作函数" class="headerlink" title="设备操作函数"></a>设备操作函数</h4><p>实现设备操作的函数,简单实现,将分别将输入输出用printk打印出来看看,copy_from_user()与copy_to_user()涉及到内核态与用户态的问题将放后面去深入学习.</p>
<ol>
<li>open()</li>
</ol>
<pre><code class="C">int hello_open(struct inode *p, struct file *f)
&#123;
    printk(KERN_INFO &quot;hello_open\r\n&quot;);
    return 0;
&#125;
</code></pre>
<ol start="2">
<li>write()</li>
</ol>
<pre><code class="C">ssize_t hello_write(struct file *f, const char __user *u, size_t count, loff_t *l)
&#123;
    int buf = 0;
    if(copy_from_user(&amp;buf, u, count))&#123;
        printk(KERN_INFO &quot;Write failed\r\n&quot;);
        return count;
    &#125;
    printk(KERN_INFO &quot;write:buf-&gt;%d\r\n&quot;,buf);
    return count;
&#125;
</code></pre>
<ol start="3">
<li>read()</li>
</ol>
<pre><code class="C">ssize_t hello_read(struct file *f, char __user *u, size_t s, loff_t *l)
&#123;
    int buf = 2;
    if(copy_to_user(u, &amp;buf, sizeof(int)))&#123;
        printk(KERN_INFO &quot;Write failed\r\n&quot;);
        return 0;
    &#125;
    printk(KERN_INFO &quot;read:%d\r\n&quot;,buf);
    return sizeof(int);
&#125;
</code></pre>
<h4 id="注销驱动函数"><a href="#注销驱动函数" class="headerlink" title="注销驱动函数"></a>注销驱动函数</h4><p>注销,将初始化分配的内存释放,取消注册字符设备编号</p>
<pre><code class="C">void __exit hello_exit(void)
&#123;
    printk(KERN_INFO &quot;hello driver exit\n&quot;);
    cdev_del(gDev);
    kfree(gFile);
    kfree(gDev);
    unregister_chrdev_region(devNum, subDevNum);
    return;
&#125;
</code></pre>
<h4 id="注册驱动模块"><a href="#注册驱动模块" class="headerlink" title="注册驱动模块"></a>注册驱动模块</h4><p>MODULE_LICENSE 许可证</p>
<pre><code class="C">module_init(hello_init);
module_exit(hello_exit);
MODULE_LICENSE(&quot;GPL&quot;);
</code></pre>
<h3 id="编译驱动"><a href="#编译驱动" class="headerlink" title="编译驱动"></a>编译驱动</h3><p>编写makefile文件, 将其编译生成ko文件</p>
<pre><code class="makefile">ifneq ($(KERNELRELEASE),)
    obj-m := helloDev.o
else
    PWD := $(shell pwd)
    KERNELDIR := /lib/modules/`uname -r`/build
all:
    make -C $(KERNELDIR) M=$(PWD)
clean:
    rm -rf *.o *.ko *.mod.c *.symvers *.c~ *~
endif
</code></pre>
<h3 id="用户层编写程序来调用驱动"><a href="#用户层编写程序来调用驱动" class="headerlink" title="用户层编写程序来调用驱动"></a>用户层编写程序来调用驱动</h3><pre><code class="C">int main(int argc, char *argv[])
&#123;
    FILE* fd, i;
    int r_len, w_len;

    char buf[DATA_NUM]=&quot;hello world&quot;;
    fd = open(&quot;/dev/hello&quot;, O_RDWR);
    if(NULL == fd) &#123;
        perror(&quot;open file error\r\n&quot;);
        return -1;
    &#125;
    else &#123;
        printf(&quot;open successe\r\n&quot;);
    &#125;

    w_len = write(fd, buf, DATA_NUM);
    r_len = read(fd, buf, DATA_NUM);

    return 0;
&#125;
</code></pre>
<h3 id="将驱动载入内核进行测试"><a href="#将驱动载入内核进行测试" class="headerlink" title="将驱动载入内核进行测试"></a>将驱动载入内核进行测试</h3><ol>
<li>将驱动载入内核,dmesg查看打印的信息</li>
</ol>
<pre><code class="shell">insmod hello.ko
dmesg
</code></pre>
<ol start="2">
<li>创建与驱动相关的设备文件节点,对应驱动的主次设备号,</li>
</ol>
<pre><code class="shell">mknod /dev/hello c 168 0
dmesg
</code></pre>
<ol start="3">
<li>移除驱动</li>
</ol>
<pre><code class="shell">rmmod hello.ko
dmesg
</code></pre>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><pre><code class="shell">shutdown -h now
</code></pre>
]]></content>
      <categories>
        <category>Operating System</category>
        <category>Programming Language</category>
      </categories>
      <tags>
        <tag>C Language</tag>
        <tag>Device Driver</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核源码编译&amp;Busybox文件系统</title>
    <url>/2023/07/f0cf423fcfa6.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="Linux内核编译"><a href="#Linux内核编译" class="headerlink" title="Linux内核编译"></a>Linux内核编译</h2><h3 id="编译前准备"><a href="#编译前准备" class="headerlink" title="编译前准备"></a>编译前准备</h3><p>一些简单的Linux命令，shell脚本的知识点： [相关知识]<br><br>makefile： <a href="../08/3840c82572a9.html">相关知识</a><br><br>Linux内核源码: <a href="https://www.kernel.org/">内核官网</a></p>
<p>源码下载后解压</p>
<pre><code class="bash">$ tar -xf linux-5.10.186.tar.gz
</code></pre>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ol>
<li>指定硬件体系架构,本例中是x86的环境:</li>
</ol>
<pre><code class="bash">$ export ARCH=x86
</code></pre>
<ol start="2">
<li>配置board config,一般在arch&#x2F;$ARCH&#x2F;configs&#x2F;目录下:</li>
</ol>
<pre><code class="bash">$ make x86_64_defconfig
</code></pre>
<ol start="3">
<li>配置内核支持RAM disk驱动:<br>首先配置:General setup -&gt; Initial RAM….<br>然后配置:Device Drivers -&gt; Block devices -&gt; RAM block device support。</li>
</ol>
<pre><code class="bash">$ make menuconfig
</code></pre>
<p><img src="/2023/07/f0cf423fcfa6/make_menuconfig_linux.png" alt="img"></p>
<ol start="4">
<li>编译,内核完成放置在：arch&#x2F;x86_64&#x2F;boot&#x2F;bzImage。</li>
</ol>
<pre><code class="bash">$ make
</code></pre>
<h2 id="编译Busybox文件系统"><a href="#编译Busybox文件系统" class="headerlink" title="编译Busybox文件系统"></a>编译Busybox文件系统</h2><h3 id="编译前准备-1"><a href="#编译前准备-1" class="headerlink" title="编译前准备"></a>编译前准备</h3><p>busybox源码下载:<a href="https://www.busybox.net/">官网</a></p>
<p>解压:</p>
<pre><code class="bash">$ tar -xvf busybox-1.36.0.tar.bz2
</code></pre>
<h3 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h3><ol>
<li>配置;先将busybox配置为静态编译</li>
</ol>
<pre><code class="bash">$ make menuconfig
</code></pre>
<p><img src="/2023/07/f0cf423fcfa6/make_menuconfig_busybox.png" alt="img"></p>
<ol start="2">
<li>编译安装, 完成后的busybox安装在源码目录下的_install目录</li>
</ol>
<pre><code class="bash">$ make &amp;&amp; make install
</code></pre>
<ol start="3">
<li>进入_install目录中,补充部分文件与目录;以及编写启动时运行的一些文件</li>
</ol>
<pre><code class="bash">$ cd _install
$ mkdir etc dev mnt
$ mkdir -p proc sys tmp
$ mkdir -p etc/init.d
$ vim etc/fstab
$ vim etc/init.d/rcS
$ chmod 755 /etc/init.d/rcS
$ vim etc/inittab
$ chmod 755 etc/inittab
$ cd dev
$ mknod console c 5 1
$ mknod null c 1 3
$ mknod tty1 c 4 1
</code></pre>
<ol start="4">
<li>制作根文件系统镜像文件,简单说来就是创建空文件,然后把根文件系统复制进去,最后打包.</li>
</ol>
<pre><code class="shell">#!/bin/bash
rm -rf rootfs.ext3
rm -rf fs
dd if=/dev/zero of=./rootfs.ext3 bs=1M count=32
mkfs.ext3 rootfs.ext3
mkdir fs
mount -o loop rootfs.ext3 ./fs
cp -rf ./_install/* ./fs
umount ./fs
gzip --best -c rootfs.ext3 &gt; rootfs.img.gz
</code></pre>
<h2 id="QEMU测试"><a href="#QEMU测试" class="headerlink" title="QEMU测试"></a>QEMU测试</h2><ol>
<li>使用qemu,用指定的kernel,以及文件系统进行启动.</li>
</ol>
<pre><code class="bash">$ qemu-system-x86_64 \
 -kernel ./linux-5.10.186/arch/x86_64/boot/bzImage \
 -initrd ./busybox-1.36.0/rootfs.img.gz \
 -append &quot;root=/dev/ram init=/linuxrc&quot; \
 -serial file:output.txt
</code></pre>
]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Busybox</tag>
        <tag>Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>makefile 入门学习篇(1)</title>
    <url>/2023/08/3840c82572a9.html</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>先了解下make,make是用于自动化编译代码的一种工具软件,构建生成目标文件,也就是target;它通过makefile文件来确定target文件的依赖关系,然后把生成target的相关命令传给shell执行;所以,makefile就是一种描述目标,依赖以及生成命令的文件.</p>
<h3 id="manfile文件编写"><a href="#manfile文件编写" class="headerlink" title="manfile文件编写"></a>manfile文件编写</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h4><pre><code class="makefile"># 用“#”号表明注释。.. ...受到.
target（要生成的文件）: dependencies（被依赖的文件）
# 命令前面用的是“tab”而非空格。误用空格是初学者容易犯的错误！
(Tab ↹)command1
(Tab ↹)command2
(Tab ↹)command3
  .
  .
(Tab ↹)commandn
# 可以使用“\”表示续行。注意，“\”之后不能有空格！
</code></pre>
<ol>
<li>target:生成的文件的名字，摆放的顺序不重要，但第一个target是默认的target。当make不带参数时，自动执行第一个target。target也可以是要求make完成的动作，执行这种target后并不能得到和target同名的文件，因此，也称为伪target(phony target)</li>
<li>dependencies:生成target所需的文件名列表。依赖可为空,若依赖不为空，则make会先检查依赖的“规则”。依赖规定了何时重新执行target下命令。若任何依赖比target更新（由于执行了依赖的“规则”的命令或用户修改了依赖），make则会重新执行target下的命令</li>
<li>command: shell可运行的命令</li>
</ol>
<h4 id="目标与依赖"><a href="#目标与依赖" class="headerlink" title="目标与依赖"></a>目标与依赖</h4><h5 id="编译用例"><a href="#编译用例" class="headerlink" title="编译用例"></a>编译用例</h5><p>编写makefile.(加”@”,不显示shell命令)</p>
<pre><code class="makefile">echo1: echo2 echo4
  @echo &quot;echo1&quot;
echo2: echo3
  @echo &quot;echo2&quot;
echo3:
  @echo &quot;echo3&quot;
echo4:
  @echo &quot;echo4&quot;
</code></pre>
<p>运行make后,输出</p>
<pre><code class="text">echo3
echo2
echo4
echo1
</code></pre>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>从上述例子可以看出,在make编写目标前,会先去寻找依赖文件(上述中没有中间文件生成,所以每次都编译依赖目标),流程如下:</p>
<ol>
<li>先扫描echo1的依赖:echo2,echo4</li>
<li>扫描echo2的依赖-&gt;扫描echo3的依赖,没有或全在就执行echo3的命令,返回执行echo2的命令</li>
<li>扫描echo4的依赖,没有或全在就执行echo4的命令</li>
<li>echo1的依赖齐全,执行echo1的命令</li>
</ol>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量的定义很简单，就是⼀个名字（变量名）后⾯跟上⼀个等号,然后在等号的后⾯放这个变量所期望的值.对于变量的引⽤,则需要采⽤$(变量名)或者${变量名}这种模式.</p>
<h5 id="自动变量"><a href="#自动变量" class="headerlink" title="自动变量"></a>自动变量</h5><ol>
<li>“$@”:表示⼀个规则中的⽬标.当我们的⼀个规则中有多个⽬标时,$@所指的是其中任何造成命令被运⾏的⽬标.</li>
<li>“$^”:表示的是规则中的所有先择条件.</li>
<li>“$&lt;”:表示的是规则中的第⼀个先决条件.</li>
</ol>
<pre><code class="makefile">all:first second third
    @echo &quot;\$$@ = $@&quot;
    @echo &quot;\$$^ = $^&quot;
    @echo &quot;\$$&lt; = $&lt;&quot;
</code></pre>
<p>输出:</p>
<pre><code class="text">$@ = all
$^ = first second third
$&lt; = first
</code></pre>
<h5 id="赋值符"><a href="#赋值符" class="headerlink" title="赋值符"></a>赋值符</h5><ol>
<li>“&#x3D;”,赋值</li>
</ol>
<pre><code class="makefile">NAME = &quot;coky&quot;
NAME = &quot;kiana&quot;
all:
  echo &quot;name = $(NAME)&quot;
# 输出: name = kiana
</code></pre>
<ol start="2">
<li>“:&#x3D;”,简单说来,就是make只对其扫描赋值一次.</li>
</ol>
<pre><code class="makefile">NAME := &quot;coky&quot;
NAME := &quot;kiana&quot;
all:
  echo &quot;name = $(NAME)&quot;
# 输出: name = coky
</code></pre>
<ol start="3">
<li>“?&#x3D;”,判断当前变量是否定义,没定义就赋值,定义了就不改变.</li>
</ol>
<pre><code class="makefile">NAME = &quot;coky&quot;
NAME ?= &quot;kiana&quot;
AGE ?= 1
all:
  echo &quot;name = $(NAME), age = $(AGE)&quot;
# 输出: name = coky, age = 1
</code></pre>
<ol start="4">
<li>“+&#x3D;”,在原先的值后面追加赋值</li>
</ol>
<pre><code class="makefile">NAME = &quot;coky&quot;
NAME += &quot;kiana&quot;
all:
  echo &quot;name = $(NAME)&quot;
# 输出: name = coky kiana
</code></pre>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>这篇,简单记录了makefile的格式,以及编写规则;再然后就是自动变量以及变量的赋值符的使用.</p>
]]></content>
      <categories>
        <category>Script Tools</category>
      </categories>
      <tags>
        <tag>makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 入门使用篇(1)</title>
    <url>/2023/07/eed8c013067e.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="从建库到删库再到跑路"><a href="#从建库到删库再到跑路" class="headerlink" title="从建库到删库再到跑路"></a>从建库到删库再到跑路</h2><p>安装就不多记录了,不同系统不同方式,一般就两种</p>
<ol>
<li>通过系统的软件包管理工具进行一键安装</li>
<li>官网&#x2F;镜像网站下载安装包手动安装</li>
</ol>
<h3 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h3><ol>
<li>创建库<br>先看看创建数据库的语法格式,然后创建一个数据库test;</li>
</ol>
<pre><code class="MySQL">CREATE DATABASE [IF NOT EXISTS] &lt;数据库名&gt;
[[DEFAULT] CHARACTER SET &lt;字符集名&gt;]
[[DEFAULT] COLLATE &lt;校对规则名&gt;];

CREATE DATABASE test;
</code></pre>
<ol start="2">
<li>查看数据库<br>语法格式,然后输入查看下;</li>
</ol>
<pre><code class="MySQL">SHOW DATABASES [LIKE &#39;数据库名&#39;];

show databases;
</code></pre>
<ol start="3">
<li>修改数据库<br>修改数据库的语法格式,参数可选;尝试将之前创建的test数据库的字符集改为utf8;</li>
</ol>
<pre><code class="MySQL">ALTER DATABASE [数据库名] &#123;
[ DEFAULT ] CHARACTER SET &lt;字符集名&gt; |
[ DEFAULT ] COLLATE &lt;校对规则名&gt;&#125;

ALTER DATABASE test CHARACTER SET utf8;
</code></pre>
<ol start="4">
<li>选择数据库<br>use进行选择,之后表的操作都在选择的数据库下.</li>
</ol>
<pre><code class="MySQL">USE &lt;数据库名&gt;

use test;
</code></pre>
<ol start="5">
<li>删除数据库</li>
</ol>
<pre><code class="MySQL">DROP DATABASE [ IF EXISTS ] &lt;数据库名&gt;

DROP DATABASE test;
</code></pre>
<h3 id="数据表基本操作"><a href="#数据表基本操作" class="headerlink" title="数据表基本操作"></a>数据表基本操作</h3><ol>
<li>创建数据表</li>
</ol>
<pre><code class="MySQL">CREATE TABLE &lt;表名&gt; (
  &lt;列名1&gt; &lt;类型1&gt; ,
        .
        .
        .
  &lt;列名n&gt; &lt;类型n&gt;
)[表选项][分区选项];

use test;
CREATE TABLE user(
  uid INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  age INT
)
</code></pre>
<ol start="2">
<li>修改数据表</li>
</ol>
<pre><code class="MySQL">ALTER TABLE &lt;表名&gt;  &#123; ADD COLUMN &lt;列名&gt; &lt;类型&gt;
| CHANGE COLUMN &lt;旧列名&gt; &lt;新列名&gt; &lt;新列类型&gt;
| ALTER COLUMN &lt;列名&gt; &#123; SET DEFAULT &lt;默认值&gt; | DROP DEFAULT &#125;
| MODIFY COLUMN &lt;列名&gt; &lt;类型&gt;
| DROP COLUMN &lt;列名&gt;
| RENAME TO &lt;新表名&gt;
| CHARACTER SET &lt;字符集名&gt;
| COLLATE &lt;校对规则名&gt; &#125;

ALTER TABLE user ADD COLUMN email VARCHAR(100);
</code></pre>
<ol start="3">
<li>查看数据表的结构</li>
</ol>
<pre><code class="MySQL">DESCRIBE &lt;表名&gt;;

DESCRIBE user;
</code></pre>
<ol start="4">
<li>删除数据表</li>
</ol>
<pre><code class="MySQL">DROP TABLE [IF EXISTS] 表名1 [ ,表名2, 表名3 ...];

DROP TABLE user;
</code></pre>
<h3 id="表内的数据进行增删改查"><a href="#表内的数据进行增删改查" class="headerlink" title="表内的数据进行增删改查"></a>表内的数据进行增删改查</h3><ol>
<li>增</li>
</ol>
<pre><code class="MySQL">INSERT INTO &lt;表名&gt; [ &lt;列名1&gt; [ , … &lt;列名n&gt;] ] VALUES (值1) [… , (值n) ];

INSERT INTO user (name, age) VALUES (&quot;coky&quot;, 24);
</code></pre>
<ol start="2">
<li>查</li>
</ol>
<pre><code class="MySQL">SELECT &#123;* | &lt;字段列名&gt;&#125;
[
FROM &lt;表 1&gt;, &lt;表 2&gt;…
[WHERE &lt;表达式&gt;
[GROUP BY &lt;group by definition&gt;
[HAVING &lt;expression&gt; [&#123;&lt;operator&gt; &lt;expression&gt;&#125;…]]
[ORDER BY &lt;order by definition&gt;]
[LIMIT[&lt;offset&gt;,] &lt;row count&gt;]
]

SELECT * FROM user;
</code></pre>
<ol start="3">
<li>改</li>
</ol>
<pre><code class="MySQL">UPDATE &lt;表名&gt; SET 字段 1=值 1 [,字段 2=值 2… ] [WHERE 子句 ]
[ORDER BY 子句] [LIMIT 子句]

UPDATE user SET age = 25 WHERE uid = 1;
</code></pre>
<ol start="4">
<li>删<br>删除数据注意条件,没条件就是全删.</li>
</ol>
<pre><code class="MySQL">DELETE FROM &lt;表名&gt; [WHERE 子句] [ORDER BY 子句] [LIMIT 子句]

DELETE FROM user WHERE uid = 1;
</code></pre>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><pre><code class="MySQL">quit;
</code></pre>
]]></content>
      <categories>
        <category>DataBase</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>algorithm</title>
    <url>/2023/08/982eb24b9a50.html</url>
    <content><![CDATA[<span id="more"></span>
]]></content>
      <categories>
        <category>categories</category>
      </categories>
      <tags>
        <tag>tag</tag>
      </tags>
  </entry>
  <entry>
    <title>algorithm</title>
    <url>/2023/08/89f7ed5e96eb.html</url>
    <content><![CDATA[<span id="more"></span>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
</search>
